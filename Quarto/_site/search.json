[
  {
    "objectID": "analysis_the_construction_department_at_croqpain.html#croqpain",
    "href": "analysis_the_construction_department_at_croqpain.html#croqpain",
    "title": "the_construction_department_at_croqpain",
    "section": "Croq’Pain",
    "text": "Croq’Pain\nData on store earnings and other characteristics for the Croq’Pain case. There should be a total of 60 different stores and 10 potential new outlets. The model used for forecasting should be built on data for the existing 60 stores.\n\nVariables\n\nSTOR: Store ID\nCITY: City in the which store is located. Only provided for potential new outlets\nEARN: Earnings in $1,000. Operating earnings: annual sales minus annual operating costs. Operating costs exclude the fixed costs of property rent and equipment rental (all capital equipment is purchased by headquarters and rented to the stores). Operating costs include variable costs such as salaries, utilities, supplies, inventories and other expenses.\nK: Capital invested in the store in $1,000. This amount is exactly equal to the purchase price of the property (or the lease, in some cases) plus the cost of all equipment and the cost of remodeling the space.\nSIZE: Size of store in square meters: Total area inside the store\nEMPL: Number of employees. Not determined until store is opened\nP15: Number of 15-24 year olds in a 3 km radius around site in 1,000s\nP25: Number of 25-34 year olds in a 3 km radius around site 1,000s\nP35: Number of 35-44 year olds in a 3 km radius around site 1,000s\nP45: Number of 45-54 year olds in a 3 km radius around site 1,000s\nP55: Number of persons above 55 in a 3 km radius around site 1,000s\ntotal: Total population in 3 km radius around site 1,000s\nINC: Average income in $1,000 in town or neighborhood around site\nCOMP: Number of competitors in a 1 km radius around site. Establishments considered as competitors include fast food restaurants, bars and cafes equipped providing lunch service\nNCOMP: Number of restaurants that do not compete directly with CroqPain in 1 km radius around site\nNREST: Number of non-restaurant businesses in 1 km radius around site\nPRICE: Monthly rent per square meter of the retail properties in the same locale.\nCLI = Cost of Living Index. Measures the cost of living in the immediate vicinity to the restaurant site. Aggregate of average cost of living index determined by the commerce department and additional economic measures taken by experts on site\nCITY: City name for potential new locations"
  },
  {
    "objectID": "analysis_the_construction_department_at_croqpain.html#now-i-will-run-the-corrlation-table-to-see-how-each-data-points-has-the-relavance-to-earn-column-which-is-our-gola-to-predict.",
    "href": "analysis_the_construction_department_at_croqpain.html#now-i-will-run-the-corrlation-table-to-see-how-each-data-points-has-the-relavance-to-earn-column-which-is-our-gola-to-predict.",
    "title": "the_construction_department_at_croqpain",
    "section": "Now I will run the corrlation table to see how each data points has the relavance to “EARN” column which is our gola to predict.",
    "text": "Now I will run the corrlation table to see how each data points has the relavance to “EARN” column which is our gola to predict.\nBefore we read the data, let me load packages for both R & Python.\n\nLoad R Packages (R)\n\nlibrary(tidyverse)\nlibrary(arrow)\nlibrary(reticulate)\nlibrary(DT)\nlibrary(GGally)\nlibrary(readr)\n\n\n\nLoad Python Packages (Python)\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import boxcox\n\n\n\nRead the data provided (R)\n\ncroqpain %&gt;% \n  DT::datatable()\n\n\n\n\n\n \n\n\nBefore I fit a linear model, I would like to make sure the distribution if it’s a good data to fit a model by looking at Histogram and Scatter Plots.\n\nCreat Histograms (Python)\n\nnum_columns = croqpain.select_dtypes(include=['float64', 'int64']).columns\n\nselected_columns = ['EARN', 'K', 'SIZE', 'EMPL', 'total', 'P15', 'P25', 'P35', 'P45', 'P55', 'INC', 'PRICE', 'CLI']\n\nplt.figure(figsize=(20, 15))\nfor i, col in enumerate(selected_columns, 1):\n    plt.subplot(5, 4, i)\n    plt.hist(croqpain[col].dropna(), bins=15)\n    plt.title(col)\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere, I see some skewness and want to make them normal distribution.\n\n(Python)\n\n# Selecting the relevant columns for transformation\ncols_to_transform = ['EARN', 'K', 'SIZE', 'INC', 'PRICE', 'CLI']\ndf_transformed = croqpain[cols_to_transform].copy()\n\n# Applying log transformation (adding a small value to avoid log(0))\n# Using numpy's log1p which is log(x + 1) to handle zero values\ndf_transformed = np.log1p(df_transformed)\n\n/opt/conda/lib/python3.11/site-packages/pandas/core/internals/blocks.py:366: RuntimeWarning: invalid value encountered in log1p\n  result = func(self.values, **kwargs)\n\n# Plotting histograms after transformation\nplt.figure(figsize=(15, 10))\nfor i, col in enumerate(cols_to_transform, 1):\n    plt.subplot(4, 4, i)\n    plt.hist(df_transformed[col].dropna(), bins=15)\n    plt.title(f'Log Transformed {col}')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nK, Price is still Right Skewed, and CLI is left skewed. Let’s fix that!\n\n# For right-skewed data ('K' and 'PRICE'), Box-Cox transformation\n# Box-Cox requires all values to be positive, so add a small value to avoid zero or negative values\ndf_transformed['K_boxcox'], _ = boxcox(croqpain['K'] + 0.01)  \ndf_transformed['PRICE_boxcox'], _ = boxcox(croqpain['PRICE'] + 0.01)\n\n# For left-skewed data ('CLI'), we use a reflection (subtracting from a constant) and then log transformation\nmax_cli = croqpain['CLI'].max() + 1  \ndf_transformed['CLI_reflected_log'] = np.log(max_cli - croqpain['CLI'])\n\n# Plotting histograms after further transformations\nplt.figure(figsize=(15, 5))\n\n&lt;Figure size 1500x500 with 0 Axes&gt;\n\n# Box-Cox transformed histograms\nplt.subplot(1, 3, 1)\n\n&lt;Axes: &gt;\n\nplt.hist(df_transformed['K_boxcox'].dropna(), bins=15)\n\n(array([1., 0., 3., 4., 4., 9., 9., 8., 4., 7., 7., 2., 7., 2., 3.]), array([0.73331066, 0.73331887, 0.73332707, 0.73333528, 0.73334348,\n       0.73335169, 0.7333599 , 0.7333681 , 0.73337631, 0.73338451,\n       0.73339272, 0.73340093, 0.73340913, 0.73341734, 0.73342554,\n       0.73343375]), &lt;BarContainer object of 15 artists&gt;)\n\nplt.title('Box-Cox Transformed K')\n\nText(0.5, 1.0, 'Box-Cox Transformed K')\n\nplt.subplot(1, 3, 2)\n\n&lt;Axes: &gt;\n\nplt.hist(df_transformed['PRICE_boxcox'].dropna(), bins=15)\n\n(array([ 2.,  0.,  1.,  1.,  5.,  8., 14.,  5.,  4.,  7.,  6.,  7.,  5.,\n        1.,  4.]), array([1.32754057, 1.35622506, 1.38490955, 1.41359405, 1.44227854,\n       1.47096304, 1.49964753, 1.52833203, 1.55701652, 1.58570102,\n       1.61438551, 1.64307001, 1.6717545 , 1.70043899, 1.72912349,\n       1.75780798]), &lt;BarContainer object of 15 artists&gt;)\n\nplt.title('Box-Cox Transformed PRICE')\n\nText(0.5, 1.0, 'Box-Cox Transformed PRICE')\n\n# Reflected log transformed histogram\nplt.subplot(1, 3, 3)\n\n&lt;Axes: &gt;\n\nplt.hist(df_transformed['CLI_reflected_log'].dropna(), bins=15)\n\n(array([ 1.,  0.,  1.,  0.,  2.,  1.,  2.,  3.,  7.,  8.,  6., 13.,  7.,\n       11.,  8.]), array([0.        , 0.2331005 , 0.46620101, 0.69930151, 0.93240202,\n       1.16550252, 1.39860302, 1.63170353, 1.86480403, 2.09790454,\n       2.33100504, 2.56410555, 2.79720605, 3.03030655, 3.26340706,\n       3.49650756]), &lt;BarContainer object of 15 artists&gt;)\n\nplt.title('Reflected Log Transformed CLI')\n\nText(0.5, 1.0, 'Reflected Log Transformed CLI')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nOh, No… CLI is still left skewed\n\n# Applying a square transformation to 'CLI'\ndf_transformed['CLI_squared'] = croqpain['CLI'] ** 2\n\n# Plotting the histogram for the squared 'CLI'\nplt.figure(figsize=(6, 4))\n\n&lt;Figure size 600x400 with 0 Axes&gt;\n\nplt.hist(df_transformed['CLI_squared'].dropna(), bins=15)\n\n(array([ 3.,  0.,  8.,  2.,  3.,  3.,  5., 10.,  5.,  6.,  8.,  7.,  5.,\n        3.,  2.]), array([12100. , 12637.6, 13175.2, 13712.8, 14250.4, 14788. , 15325.6,\n       15863.2, 16400.8, 16938.4, 17476. , 18013.6, 18551.2, 19088.8,\n       19626.4, 20164. ]), &lt;BarContainer object of 15 artists&gt;)\n\nplt.title('Squared Transformed CLI')\n\nText(0.5, 1.0, 'Squared Transformed CLI')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nOkay, good. Now we have a normally distributed data points.\n\n\nHow about Outliers? Will ther be any outliers to affect the data to be normal? let’s look at the scatter plots!\n\n\n&lt;Figure size 1500x2000 with 0 Axes&gt;\n\n\n&lt;Axes: &gt;\n&lt;matplotlib.collections.PathCollection object at 0xffff543fe950&gt;\nText(0.5, 0, 'Transformed K')\nText(0, 0.5, 'Transformed EARN')\nText(0.5, 1.0, 'EARN vs Transformed K')\n&lt;Axes: &gt;\n&lt;matplotlib.collections.PathCollection object at 0xffff5456b2d0&gt;\nText(0.5, 0, 'Transformed SIZE')\nText(0, 0.5, 'Transformed EARN')\nText(0.5, 1.0, 'EARN vs Transformed SIZE')\n&lt;Axes: &gt;\n&lt;matplotlib.collections.PathCollection object at 0xffff54556250&gt;\nText(0.5, 0, 'EMPL')\nText(0, 0.5, 'Transformed EARN')\nText(0.5, 1.0, 'EARN vs EMPL')\n&lt;Axes: &gt;\n&lt;matplotlib.collections.PathCollection object at 0xffff54432dd0&gt;\nText(0.5, 0, 'P15')\nText(0, 0.5, 'Transformed EARN')\nText(0.5, 1.0, 'EARN vs P15')\n&lt;Axes: &gt;\n&lt;matplotlib.collections.PathCollection object at 0xffff545b6d50&gt;\nText(0.5, 0, 'P25')\nText(0, 0.5, 'Transformed EARN')\nText(0.5, 1.0, 'EARN vs P25')\n&lt;Axes: &gt;\n&lt;matplotlib.collections.PathCollection object at 0xffff542ada90&gt;\nText(0.5, 0, 'P35')\nText(0, 0.5, 'Transformed EARN')\nText(0.5, 1.0, 'EARN vs P35')\n&lt;Axes: &gt;\n&lt;matplotlib.collections.PathCollection object at 0xffff54273850&gt;\nText(0.5, 0, 'P45')\nText(0, 0.5, 'Transformed EARN')\nText(0.5, 1.0, 'EARN vs P45')\n&lt;Axes: &gt;\n&lt;matplotlib.collections.PathCollection object at 0xffff54328a50&gt;\nText(0.5, 0, 'P55')\nText(0, 0.5, 'Transformed EARN')\nText(0.5, 1.0, 'EARN vs P55')\n&lt;Axes: &gt;\n&lt;matplotlib.collections.PathCollection object at 0xffff54361b10&gt;\nText(0.5, 0, 'total')\nText(0, 0.5, 'Transformed EARN')\nText(0.5, 1.0, 'EARN vs total')\n&lt;Axes: &gt;\n&lt;matplotlib.collections.PathCollection object at 0xffff54179b10&gt;\nText(0.5, 0, 'Transformed INC')\nText(0, 0.5, 'Transformed EARN')\nText(0.5, 1.0, 'EARN vs Transformed INC')\n&lt;Axes: &gt;\n&lt;matplotlib.collections.PathCollection object at 0xffff5419b650&gt;\nText(0.5, 0, 'Transformed PRICE')\nText(0, 0.5, 'Transformed EARN')\nText(0.5, 1.0, 'EARN vs Transformed PRICE')\n&lt;Axes: &gt;\n&lt;matplotlib.collections.PathCollection object at 0xffff5420ad90&gt;\nText(0.5, 0, 'Transformed CLI')\nText(0, 0.5, 'Transformed EARN')\nText(0.5, 1.0, 'EARN vs Transformed CLI')"
  }
]